searchData={"items":[{"type":"module","title":"AddressBook","doc":"A simple command-line address book application built in Elixir.\n\nIt supports user authentication, contact management (add, edit, view, delete, search),\nand persists data to local text files within a 'database' subdirectory.\nThis application serves as a learning tool for basic Elixir concepts including\nstate management via recursion, file I/O, data structures (Maps, Lists),\nand user interaction.\n\n**WARNING:** This application stores user passwords in plain text for simplicity and\neducational purposes. **DO NOT** use this code in any production environment.\nSecure password handling (hashing and salting) is essential for real-world applications.","ref":"AddressBook.html"},{"type":"function","title":"AddressBook.auth_menu/0","doc":"Displays the authentication menu options to the user.","ref":"AddressBook.html#auth_menu/0"},{"type":"function","title":"AddressBook.contact_menu/0","doc":"Displays the contact management menu options to the logged-in user.","ref":"AddressBook.html#contact_menu/0"},{"type":"function","title":"AddressBook.create/3","doc":"Handles the process of adding a new contact for the current user.\n\nPrompts the user for contact details (first name, last name, contact number, email).\nAllows the user to cancel input at any step by typing '*'.\nCollects the details into a map and then proceeds to the `review_new_contact/4` step.\n\nArguments:\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps.\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#create/3"},{"type":"function","title":"AddressBook.delete/3","doc":"Handles the process of deleting a contact for the current user.\n\nDisplays the current user's contacts, prompts for the entry number to delete.\nIf a valid entry number is selected, removes the contact from the list,\nre-indexes the remaining contacts for that specific user, and saves the\nfull list (with the contact removed and user's contacts re-indexed)\nto the file. Displays a success message and the updated list, then\nreturns to the main loop. Handles invalid input and cases where the\nuser has no contacts.\n\nArguments:\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#delete/3"},{"type":"function","title":"AddressBook.display_contact/1","doc":"Displays the details of a single contact map to the user.\n\nFormats and prints the key=value pairs for the contact, excluding\nthe internal 'user' field which links it to a specific user.\n\nArguments:\n  - `contact`: A single contact map.","ref":"AddressBook.html#display_contact/1"},{"type":"function","title":"AddressBook.display_contacts/1","doc":"Displays a list of contact maps to the user.\n\nIterates through the list, calling `display_contact/1` for each contact\nand adding an empty line between entries for readability.\n\nArguments:\n  - `contacts`: A list of contact maps to display.","ref":"AddressBook.html#display_contacts/1"},{"type":"function","title":"AddressBook.edit/3","doc":"Handles the process of editing an existing contact for the current user.\n\nDisplays the current user's contacts, prompts for the entry number to edit.\nIf a valid entry number is selected, prompts for updated details for each field,\nallowing blank input to keep the current value or '*' to cancel.\nUpdates the contact in the list, saves the full list to the file, displays\na success message, and returns to the main loop. Handles invalid input and\ncases where the user has no contacts.\n\nArguments:\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#edit/3"},{"type":"function","title":"AddressBook.edit_new_contact_details/4","doc":"Allows the user to edit the details of the contact they are currently\ncreating, prompting for each field and allowing blank input to keep\nthe existing value or '*' to cancel the entire creation process.\n\nArguments:\n  - `current_details`: A map containing the current details of the contact being created.\n  - `contacts`: The current list of all contact maps (passed through).\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#edit_new_contact_details/4"},{"type":"function","title":"AddressBook.end_session/0","doc":"Ends the application session gracefully.\n\nDisplays a farewell message and halts the system with an exit code of 0.","ref":"AddressBook.html#end_session/0"},{"type":"function","title":"AddressBook.get_input/1","doc":"Gets a line of input from the user after displaying a prompt and trims whitespace.\n\nArguments:\n  - `prompt`: The string prompt to display to the user.\n\nReturns:\n  - The trimmed string input from the user.","ref":"AddressBook.html#get_input/1"},{"type":"function","title":"AddressBook.handle_auth_action/3","doc":"Handles user input when no user is logged in.\n\nBased on the input, it calls the corresponding function for\nregistration, login, or ending the session. Invalid input\nresults in an error message and returns to the main loop.\n\nArguments:\n  - `input`: The trimmed string input from the user.\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps.","ref":"AddressBook.html#handle_auth_action/3"},{"type":"function","title":"AddressBook.handle_contact_action/4","doc":"Handles user input when a user is logged in.\n\nBased on the input, it calls the corresponding function for\ncontact management (Create, Edit, View, Delete, Search) or\nlogging out. Invalid input results in an error message and\nreturns to the main loop.\n\nArguments:\n  - `input`: The trimmed string input from the user.\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps.\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#handle_contact_action/4"},{"type":"function","title":"AddressBook.load_contacts/0","doc":"Loads contacts from the contacts file (`database/contacts.txt`).\n\nReads the file content, splits it into contact entries based on double newlines,\nand parses each entry from the custom `key = value` format into an Elixir map.\nConverts the 'entry' key's value to an integer and other values to strings.\nReturns a list of contact maps or an empty list if the file doesn't exist or\nan error occurs during reading.\n\nReturns:\n  - A list of contact maps.","ref":"AddressBook.html#load_contacts/0"},{"type":"function","title":"AddressBook.load_users/0","doc":"Loads users from the users file (`database/users.txt`).\n\nReads the file content, splits it into user entries based on double newlines,\nand parses each entry from the custom `key = value` format into an Elixir map.\nReturns a list of user maps or an empty list if the file doesn't exist or\nan error occurs during reading.\n\nReturns:\n  - A list of user maps.","ref":"AddressBook.html#load_users/0"},{"type":"function","title":"AddressBook.login/2","doc":"Handles the user login process.\n\nPrompts the user for username and password. Checks if a user with\nthe matching username and password exists in the users list. If found,\nstarts the main loop in a logged-in state with the authenticated user's\nusername. If not found, displays an error and returns to the\nauthentication menu. Warns about plain text password check.\n\nArguments:\n  - `contacts`: The current list of all contact maps (passed through, not used in this function).\n  - `users`: The current list of all user maps.","ref":"AddressBook.html#login/2"},{"type":"function","title":"AddressBook.logout/2","doc":"Logs out the current user.\n\nSimply returns to the main loop in a pre-login state by setting the\n`current_user` argument to `nil`.\n\nArguments:\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps.","ref":"AddressBook.html#logout/2"},{"type":"function","title":"AddressBook.main_loop/3","doc":"The main application loop.\n\nManages the application state (`contacts`, `users`, `current_user`) recursively.\nIt displays the appropriate menu (authentication or contact management)\nbased on whether a user is logged in (`current_user` is non-nil).\nIt reads user input and delegates handling to either `handle_auth_action/3`\nor `handle_contact_action/4`. The loop continues until the user chooses\nto exit or signals end-of-file (Ctrl+D).\n\nArguments:\n  - `contacts`: A list of all contact maps loaded from the file.\n  - `users`: A list of all user maps loaded from the file.\n  - `current_user`: The username (string) of the logged-in user, or `nil` if no user is logged in.","ref":"AddressBook.html#main_loop/3"},{"type":"function","title":"AddressBook.register/2","doc":"Handles the user registration process.\n\nPrompts the user for a username and password. Checks if the username\nalready exists. If not, creates a new user map, adds it to the list\nof users, saves the updated list to the users file, and returns\nto the authentication menu. Warns about plain text password storage.\n\nArguments:\n  - `contacts`: The current list of all contact maps (passed through, not used in this function).\n  - `users`: The current list of all user maps.","ref":"AddressBook.html#register/2"},{"type":"function","title":"AddressBook.review_new_contact/4","doc":"Displays a summary of the new contact details and presents options to save,\nedit, or cancel the contact creation process.\n\nArguments:\n  - `contact_details`: A map containing the details collected for the new contact.\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps.\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#review_new_contact/4"},{"type":"function","title":"AddressBook.run/0","doc":"Starts the address book application loop.\n\nThis is the main entry point. It initializes the database directory,\nloads existing contacts and users from their respective files, and\nenters the main application loop in a pre-login state (no user logged in).","ref":"AddressBook.html#run/0"},{"type":"function","title":"AddressBook.save_contacts/1","doc":"Saves the current list of contacts to the contacts file (`database/contacts.txt`).\n\nFormats the list of contact maps into the custom `key = value` format,\nwith double newlines separating entries. Writes the formatted string to the file,\noverwriting the existing content. Ensures the database directory exists first.\n\nArguments:\n  - `contacts`: The list of contact maps to save.\n\nReturns:\n  - `:ok` if the file was successfully written.\n  - `{:error, reason}` if an error occurred during writing.","ref":"AddressBook.html#save_contacts/1"},{"type":"function","title":"AddressBook.save_new_contact/4","doc":"Saves the new contact to the in-memory contacts list and then persists\nthe entire list to the contacts file.\n\nDetermines the next available entry number specific to the current user.\nCreates a new contact map including the user and entry number.\nAdds the new contact to the list, saves the list, displays a success\nmessage, and returns to the main loop. Handles file saving errors.\n\nArguments:\n  - `contact_details`: A map containing the details for the contact to save.\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#save_new_contact/4"},{"type":"function","title":"AddressBook.save_users/1","doc":"Saves the current list of users to the users file (`database/users.txt`).\n\nFormats the list of user maps into the custom `key = value` format,\nwith double newlines separating entries. Writes the formatted string to the file,\noverwriting the existing content. Ensures the database directory exists first.\n**WARNING:** This saves passwords in plain text.\n\nArguments:\n  - `users`: The list of user maps to save.\n\nReturns:\n  - `:ok` if the file was successfully written.\n  - `{:error, reason}` if an error occurred during writing.","ref":"AddressBook.html#save_users/1"},{"type":"function","title":"AddressBook.search/3","doc":"Searches contacts belonging to the current user based on a search term.\n\nFilters the current user's contacts, checking if the search term (case-insensitive)\nis contained within the first name, last name, contact number, or email fields.\nDisplays the matching contacts or a \"not found\" message. Allows '*' to cancel.\n\nArguments:\n  - `contacts`: The current list of all contact maps.\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#search/3"},{"type":"function","title":"AddressBook.view/4","doc":"Displays all contacts belonging to the current user.\n\nFilters the full contacts list to include only contacts where the\n`user` field matches `current_user`. Displays a message if the user\nhas no contacts. Uses `display_contacts/1` to format the output.\nReturns to the main loop after displaying.\n\nArguments:\n  - `user_contacts`: A list of contact maps belonging only to the current user.\n                   (This is a filtered subset of the full contacts list).\n  - `contacts`: The full current list of all contact maps (passed through).\n  - `users`: The current list of all user maps (passed through).\n  - `current_user`: The username (string) of the logged-in user.","ref":"AddressBook.html#view/4"},{"type":"task","title":"mix run_address_book","doc":"Runs the simple file-based address book application.\n\nThis is the Mix task that serves as the command-line entry point.\nExecute with `mix run_address_book`.","ref":"Mix.Tasks.RunAddressBook.html"},{"type":"function","title":"Mix.Tasks.RunAddressBook.run/1","doc":"The entry point for the Mix task.\n\nThis function is called by Mix when you run `mix run_address_book`.\nIt delegates the actual application startup to `AddressBook.run/0`.\nThe underscore `_` means we are ignoring any arguments passed to the task.","ref":"Mix.Tasks.RunAddressBook.html#run/1"},{"type":"extras","title":"Simple Elixir CLI Address Book","doc":"# Simple Elixir CLI Address Book\n\nA basic command-line application in Elixir for managing personal contacts with multi-user support and file-based persistence. This project serves as an educational resource for new Elixir developers to learn fundamental concepts by exploring a functional example.\n\n**WARNING:** This application stores user passwords in plain text for simplicity and educational purposes. **DO NOT** use this code in any production environment. Secure password handling (hashing and salting) is essential for real-world applications.","ref":"readme.html"},{"type":"extras","title":"Features - Simple Elixir CLI Address Book","doc":"* User Registration\n* User Login/Logout\n* Add New Contacts (per user)\n* Edit Existing Contacts (per user)\n* View All Contacts (for the logged-in user)\n* Delete Contacts (per user)\n* Search Contacts (by name, number, or email for the logged-in user)\n* Data persistence to local text files (`database/contacts.txt` and `database/users.txt`).","ref":"readme.html#features"},{"type":"extras","title":"How to Run - Simple Elixir CLI Address Book","doc":"1.  **Prerequisites:**\n    * Elixir and Erlang/OTP installed on your system. You can find installation instructions [here](https://elixir-lang.org/install.html).\n2.  **Clone the repository:**\n    ```bash\n    git clone   # Replace with the actual repository URL\n    cd address_book # Or the name you chose for the project\n    ```\n3.  **Fetch dependencies:**\n    ```bash\n    mix deps.get\n    ```\n    This will download `ex_doc`, needed for documentation generation.\n4.  **Run the application using Mix:**\n    ```bash\n    mix run_address_book\n    ```\n    The application will start, display a welcome message, and present the authentication menu.","ref":"readme.html#how-to-run"},{"type":"extras","title":"Project Structure - Simple Elixir CLI Address Book","doc":"* `.gitignore`: Specifies intentionally untracked files that Git should ignore (like our data files).\n* `README.md`: This documentation file you are reading.\n* `LICENSE`: Contains the terms under which the project is licensed (e.g., MIT).\n* `mix.exs`: Elixir project configuration file, defining dependencies, tasks, etc.\n* `lib/`: Contains the core Elixir source code.\n    * `address_book.ex`: The main `AddressBook` module with all application logic.\n    * `mix/`: Directory for custom Mix tasks.\n        * `tasks/`: Directory for custom Mix tasks.\n            * `run_address_book.ex`: The `Mix.Tasks.RunAddressBook` module, the application's entry point via `mix`.\n* `database/`: This directory will be automatically created the first time you run the application.\n    * `contacts.txt`: Stores contact data in a custom text format.\n    * `users.txt`: Stores user data in a custom text format (includes plain text passwords - see WARNING).","ref":"readme.html#project-structure"},{"type":"extras","title":"Code Overview and Key Concepts for Learning - Simple Elixir CLI Address Book","doc":"This application is designed to demonstrate several core Elixir and functional programming concepts:\n\n1.  **Modules and Functions:** The code is organized into logical units (`AddressBook`, `Mix.Tasks.RunAddressBook`). Explore how functions are defined (`def`, `defp`) and called. Pay attention to the `@moduledoc` and `@doc` attributes used for documentation.\n2.  **State Management with Recursion:** Notice the `AddressBook.main_loop/3` function. Instead of mutable state and imperative loops, the application state (the current lists of `contacts`, `users`, and the `current_user`) is passed as arguments in recursive function calls. This is a common functional pattern for managing state in long-running processes or simple state machines.\n3.  **Pattern Matching and `case` Expressions:** Observe how `case` expressions and pattern matching are used extensively to handle different user inputs (`\"1\"`, `\"2\"`, etc.) and function return values (e.g., `{:ok, content}`, `{:error, reason}` from file operations).\n4.  **Data Structures (Maps and Lists):** Contacts and users are represented as Elixir Maps (`%{}`, although not formal structs here). Collections of contacts and users are managed as Lists (`[]`). The `Enum` module is used to work with these lists.\n5.  **The `Enum` Module:** Elixir's `Enum` module provides powerful functions for working with collections (lists, maps, etc.). See examples of `Enum.map`, `Enum.filter`, `Enum.find`, `Enum.reduce`, `Enum.any?`, `Enum.empty?`, `Enum.max_by`, `Enum.find_index`, `Enum.reject` for data manipulation and querying.\n6.  **The `String` Module:** Learn how `String.trim`, `String.split`, `String.to_atom`, `String.to_integer`, `String.downcase`, `String.contains?` are used for input processing, data formatting, and searching.\n7.  **File I/O (`File` module):** The application uses the `File` module to read from (`File.read/1`) and write to (`File.write/2`) the data files. Pay attention to how file operation results are handled using `{:ok, ...}` and `{:error, ...}` tuples. `File.exists?/1` checks if a file is present, and `File.mkdir_p/1` ensures directories exist.\n8.  **User Interaction (`IO` module):** `IO.gets/1` is used to get input from the user (including handling the `:eof` case for Ctrl+D), and `IO.puts/1` is used to display output.","ref":"readme.html#code-overview-and-key-concepts-for-learning"},{"type":"extras","title":"Data Format - Simple Elixir CLI Address Book","doc":"The application uses a simple custom text format to store data in `database/contacts.txt` and `database/users.txt`. Each record (contact or user) is represented by `key = value` pairs on separate lines, and records are separated by a double newline (`\\n\\n`).\n\nExample `database/contacts.txt`:\n\nuser = alice\\\nentry = 1\\\nfirst_name = Bob\\\nlast_name = Smith\\\ncontact = 123-456-7890\\\nemail = bob.smith@example.com\n\nuser = alice\\\nentry = 2\\\nfirst_name = Charlie\\\nlast_name = Brown\\\ncontact = 555-123-4567\\\nemail = charlie.b@peanuts.com\n\nuser = bob\\\nentry = 1\\\nfirst_name = Alice\\\nlast_name = Wonderland\\\ncontact = 987-654-3210\\\nemail = alice@example.com\n\n\nExample `database/users.txt`:\n\nusername = alice\\\npassword = plain_password_1\n\nusername = bob\\\npassword = plain_password_2\n\n\n**Note:** This format is easy to read and write for this simple application but is not robust for complex data, concurrent access, or large datasets. It's also highly insecure for storing passwords.","ref":"readme.html#data-format"},{"type":"extras","title":"Generating HTML Documentation - Simple Elixir CLI Address Book","doc":"The code includes `@moduledoc` and `@doc` attributes. You can generate browsable HTML documentation from these comments using `ExDoc`:\n\n1.  Make sure you have fetched dependencies (`mix deps.get`).\n2.  Run the documentation task:\n    ```bash\n    mix docs\n    ```\n3.  Open the generated documentation in your web browser by opening the file `doc/index.html`.","ref":"readme.html#generating-html-documentation"},{"type":"extras","title":"Areas for Improvement and Further Learning - Simple Elixir CLI Address Book","doc":"This application can be extended and improved in many ways. Consider implementing some of these to further practice your Elixir skills:\n\n* **Security:** **Implement secure password hashing** (e.g., using the `bcrypt_elixir` library) instead of plain text storage and comparison.\n* **Data Validation:** Add validation to ensure contact details (like email format or phone number) are valid before saving.\n* **Error Handling:** Make the error handling more sophisticated, perhaps providing more user-friendly messages for specific issues or logging errors to a file.\n* **Data Storage:** Replace the simple file storage with a more robust solution like:\n    * [ETS (Erlang Term Storage)](https://www.erlang.org/doc/man/ets.html) for faster in-memory storage (though data would not persist after the application stops unless explicitly saved/loaded).\n    * A lightweight database like SQLite using an Elixir library (e.g., `sqlite_ecto2`).\n    * A proper database like PostgreSQL or MySQL using Ecto, Elixir's database wrapper.\n* **Concurrency:** How would you handle multiple processes or users accessing the data simultaneously without file locking issues? (This simple app is single-process).\n* **More Features:** Add sorting contacts by name, filtering by other criteria, exporting contacts to a different format (like CSV), importing contacts.\n* **Testing:** Write unit tests for your functions, especially the data loading, saving, and contact management logic.\n* **Supervisors:** If evolving into a more complex application structure, introduce supervisors to manage and restart processes that might crash.","ref":"readme.html#areas-for-improvement-and-further-learning"},{"type":"extras","title":"Getting Started as a New Team Member - Simple Elixir CLI Address Book","doc":"This project is your starting point for learning Elixir CLI development. Here's a suggested path:\n\n1.  **Get it Running:** Follow the \"How to Run\" instructions above to ensure you can start and interact with the application. Register a user and add some contacts. Observe how the `database/` directory and files are created.\n2.  **Explore the Code:** Read through `lib/address_book.ex` and `lib/mix/tasks/run_address_book.ex`. Use the inline `@moduledoc` and `@doc` comments directly in your editor, or generate the HTML documentation (`mix docs`) and browse it in your web browser.\n3.  **Trace Execution:** As you interact with the running application, try to follow the code path in your editor. For example, choose \"1\" from the contact menu (\"Add Contact\") and trace how `handle_contact_action` calls `create`, which then calls `get_input` multiple times, and finally leads to `review_new_contact` and `save_new_contact`.\n4.  **Identify Key Patterns:** Look for the recurring patterns like state passing in `main_loop`, `case` statements for handling different outcomes (input, file operations), and `Enum` functions for list manipulation.\n5.  **Implement an Improvement:** Pick one item from the \"Areas for Improvement\" list (e.g., add basic validation to ensure the email address input contains \"@\" and \".\") and try to implement it. This hands-on practice is invaluable.\n6.  **Build Your Own:** Once you feel comfortable, try starting a new Mix project (`mix new my_cli_app`) and build something similar but different (e.g., a task tracker, a simple inventory), using this project as a reference and template for structure, state management, and file I/O.","ref":"readme.html#getting-started-as-a-new-team-member"},{"type":"extras","title":"License - Simple Elixir CLI Address Book","doc":"This project is open-source under the [MIT License](LICENSE).","ref":"readme.html#license"},{"type":"extras","title":"Contributing - Simple Elixir CLI Address Book","doc":"(Optional section: If you want to accept contributions from team members for improving this example)","ref":"readme.html#contributing"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}